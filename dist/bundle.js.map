{"version":3,"sources":["webpack:///./main.sass?5b39","webpack:///./components/Cell.js","webpack:///./components/IntervalEvent.js","webpack:///./components/Snake.js","webpack:///./components/Table.js","webpack:///./components/config.js","webpack:///./core/App.js","webpack:///./core/Controller.js","webpack:///./core/Model.js","webpack:///./core/View.js","webpack:///./index.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/startup"],"names":[],"mappings":"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","file":"./bundle.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// класс клетки на поле\r\nexport class Cell {\r\n    constructor(x, y) {\r\n        if (typeof x !== \"number\" || typeof y !== \"number\") {\r\n            throw new Error(\"Координаты клетки не корректны\")\r\n        } else {\r\n            let el = document.createElement(\"div\");\r\n            el.setAttribute(\"data-i\", x)\r\n            el.setAttribute(\"data-j\", y)\r\n            el.classList.add(\"cell\");\r\n            return {el: el, x: x, y: y};\r\n        }\r\n    }\r\n\r\n}","import {config} from \"./config\";\r\nimport {app} from \"../index\";\r\n\r\nexport class IntervalEvent {\r\n    constructor() {\r\n        this.$funcList = []\r\n        this.$idInterval = setInterval(function () {\r\n            for (let i = 0; i < app.$intervalEvent.$funcList.length; i++) {\r\n                app.$intervalEvent.$funcList[i]();\r\n            }\r\n        }, config.speed)\r\n    }\r\n\r\n    clearInterval() {\r\n        this.$funcList = [];\r\n    }\r\n\r\n    // Добавить функцию для выполнения после окончания тика\r\n    addEvent(func) {\r\n        this.$funcList.push(func);\r\n    }\r\n}","// класс змейки на поле\r\n\r\nimport {config} from \"./config\";\r\nimport {app} from \"../index\";\r\n\r\nexport class Snake {\r\n    constructor(x, y) {\r\n\r\n    }\r\n\r\n\r\n    // Добавить змею на поле\r\n    startSnake() {\r\n        // указать начальную точку змеи на поле\r\n        this.listPoints = [];\r\n        this.$direction = \"down\";\r\n        //app.$model.$snake.addSnakeCell({x: config.snakeStartX, y: config.snakeStartY});\r\n        app.$model.$snake.addSnakeCell({x: config.snakeStartX, y: config.snakeStartY});\r\n        this.$lastCell = {x: config.snakeStartX, y: config.snakeStartY}\r\n\r\n        app.$intervalEvent.addEvent(function () {\r\n\r\n            let firstCell = app.$model.$snake.getNewFirstCell()\r\n\r\n\r\n            if (app.$model.$table.$FieldState[firstCell.x][firstCell.y] === \"2\") {\r\n                app.$model.$table.setTargetCell()\r\n            } else {\r\n                app.$model.$snake.removeSnakeCell();\r\n            }\r\n\r\n            if (app.$model.$table.$FieldState[firstCell.x][firstCell.y] === \"1\") {\r\n                app.newGame()\r\n                return;\r\n            }\r\n\r\n            app.$model.$snake.addSnakeCell(firstCell)\r\n\r\n            app.$view.updateSnake()\r\n        })\r\n    }\r\n\r\n    addSnakeCell(firstCell) {\r\n        app.$model.$table.$FieldState[firstCell.x][firstCell.y] = \"1\"\r\n        app.$model.$snake.listPoints.unshift(firstCell)\r\n\r\n\r\n        app.$view.addSnakeCell(firstCell)\r\n    }\r\n\r\n    removeSnakeCell() {\r\n        app.$model.$snake.$lastCell = app.$model.$snake.listPoints.pop()\r\n        app.$model.$table.$FieldState[app.$model.$snake.$lastCell.x][app.$model.$snake.$lastCell.y] = \"0\"\r\n\r\n        app.$view.removeSnakeCell(app.$model.$snake.$lastCell)\r\n    }\r\n\r\n    getNewFirstCell() {\r\n\r\n        let firstCell = Object.assign({}, app.$model.$snake.listPoints[0])\r\n\r\n        if (app.$model.$snake.$direction === \"up\") {\r\n            if (app.$model.$snake.listPoints[0].x !== 0) {\r\n                firstCell.x -= 1;\r\n            } else {\r\n                firstCell.x = config.axisCellCount - 1;\r\n            }\r\n        } else if (app.$model.$snake.$direction === \"down\") {\r\n            if (app.$model.$snake.listPoints[0].x < (config.axisCellCount - 1)) {\r\n                firstCell.x += 1;\r\n            } else {\r\n                firstCell.x = 0;\r\n            }\r\n        } else if (app.$model.$snake.$direction === \"left\") {\r\n            if (app.$model.$snake.listPoints[0].y !== 0) {\r\n                firstCell.y -= 1;\r\n            } else {\r\n                firstCell.y = config.axisCellCount - 1;\r\n            }\r\n\r\n        } else if (app.$model.$snake.$direction === \"right\") {\r\n            if (app.$model.$snake.listPoints[0].y < (config.axisCellCount - 1)) {\r\n                firstCell.y += 1;\r\n            } else {\r\n                firstCell.y = 0;\r\n            }\r\n        }\r\n\r\n        return firstCell;\r\n    }\r\n\r\n\r\n}\r\n","import {Cell} from \"./Cell\";\r\nimport {Snake} from \"./Snake\";\r\nimport {app} from \"../index\";\r\nimport {config} from \"./config\";\r\n\r\n// класс поля игры\r\nexport class Table {\r\n    constructor(axisCellCount) {\r\n        this.$cellCount = axisCellCount * axisCellCount;\r\n        this.$axisCellCount = axisCellCount;\r\n\r\n        // массив претендентов на свободную клетку для таргета змейки\r\n        this.$randomFieldState = new Array(axisCellCount)\r\n        this.$FieldState = new Array(axisCellCount)\r\n\r\n\r\n        for (let i = 0; i < axisCellCount; i++) {\r\n            this.$FieldState[i] = new Array(axisCellCount)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    setTargetCell() {\r\n        let freeCell = app.$model.$table.getFreeCell()\r\n        this.$FieldState[freeCell.x][freeCell.y] = \"2\";\r\n\r\n        app.$view.setTargetCell(freeCell)\r\n    }\r\n\r\n    initTable() {\r\n        app.$view.clearTable();\r\n\r\n        for (let i = 0; i < config.axisCellCount; i++) {\r\n            for (let j = 0; j < config.axisCellCount; j++) {\r\n                this.$FieldState[i][j] = \"0\"\r\n            }\r\n        }\r\n\r\n        let tempCell;\r\n        for (let i = 0; i < config.axisCellCount; i++)\r\n            for (let j = 0; j < config.axisCellCount; j++) {\r\n                app.$view.addTableCell(new Cell(i, j))\r\n            }\r\n    }\r\n\r\n    // получить свободную клетку на поле для таргет клетки\r\n    getFreeCell(table, snake) {\r\n        let randY = Math.floor(Math.random() * (this.$axisCellCount - 1 )) + 1\r\n        let randX = Math.floor(Math.random() * (this.$axisCellCount - 1 )) + 1\r\n\r\n        let randDirection = Math.floor(Math.random()) === 1 ? -1 : 1;\r\n\r\n        // проходим по строке x, либо назад, либо вперед до конца\r\n        for (let i = randX; 0 < i && i < this.$axisCellCount; i += randDirection) {\r\n            if (this.$FieldState[randX][i] === \"0\") {\r\n                return {x: randX, y: i}\r\n            }\r\n        }\r\n        // // проходим по строке x, либо назад, либо вперед до конца\r\n        for (let i = randX;0 < i && i < this.$axisCellCount; i -= randDirection) {\r\n            if (this.$FieldState[randX][i] === \"0\") {\r\n                return {x: randX, y: i}\r\n            }\r\n        }\r\n\r\n        if (randDirection === 1) {\r\n            for (let i = ++randX; i > 0 && i < this.$axisCellCount; i++) {\r\n                for (let j = 0; j < this.$axisCellCount; j++) {\r\n                    if (this.$FieldState[i][j] === \"0\") {\r\n                        return {x: randX, y: i}\r\n                    }\r\n                }\r\n            }\r\n            for (let i = --randX; i > 0; i--) {\r\n                for (let j = this.$axisCellCount - 1; j > 0; j--) {\r\n                    if (this.$FieldState[i][j] === \"0\") {\r\n                        return {x: randX, y: i}\r\n                    }\r\n                }\r\n            }\r\n        } else if (randDirection === -1) {\r\n            for (let i = --randX; i > 0; i--) {\r\n                for (let j = this.$axisCellCount - 1; j > 0; j--) {\r\n                    if (this.$FieldState[i][j] === \"0\") {\r\n                        return {x: randX, y: i}\r\n                    }\r\n                }\r\n            }\r\n            for (let i = ++randX; i > 0 && i < this.$axisCellCount; i++) {\r\n                for (let j = 0; j < this.$axisCellCount; j++) {\r\n                    if (this.$FieldState[i][j] === \"0\") {\r\n                        return {x: randX, y: i}\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","export let config = {\r\n    root: \"board\", // корневой элемент для поля\r\n    axisCellCount: 8, // количество квадратов по оси x и y\r\n    speed: 250, // скорость обновления поля в милисекундах\r\n    snakeStartX: 4, // начальная точка змейки по x\r\n    snakeStartY: 4, // начальная точка змейки по y\r\n}","import {config} from \"../components/config\"\r\nimport {Controller} from \"./Controller\";\r\nimport {Model} from \"./Model\";\r\nimport {View} from \"./View\";\r\nimport {IntervalEvent} from \"../components/IntervalEvent\";\r\n\r\n// Главный экзепляр игры\r\nexport class App {\r\n    constructor(axisCellCount, root) {\r\n        this.$controller = new Controller()\r\n        this.$model = new Model(axisCellCount)\r\n        this.$view = new View()\r\n        this.$intervalEvent = new IntervalEvent()\r\n        this.$root = document.getElementById(config.root)\r\n        this.$root.setAttribute (\"style\", `grid-template-columns: repeat(${config.axisCellCount},auto); grid-template-rows: repeat(${config.axisCellCount},auto)`);\r\n    }\r\n\r\n    // начать игру\r\n    startGame() {\r\n        this.$controller.startListenEvents()\r\n        this.$model.$table.initTable()\r\n        this.$model.$table.setTargetCell()\r\n        this.$model.$snake.startSnake()\r\n    }\r\n\r\n    // Начать новую игру\r\n    newGame() {\r\n        //history.go(0)\r\n        location.reload()\r\n\r\n        // this.$controller = new Controller()\r\n        // this.$model = new Model(config.axisCellCount)\r\n        // this.$view = new View()\r\n        // this.$intervalEvent = new IntervalEvent()\r\n\r\n        // this.$intervalEvent.clearInterval()\r\n        // this.$controller.removeListenEvents()\r\n        //\r\n        //\r\n        // this.$model.$table.initTable()\r\n        // this.$model.$snake.startSnake()\r\n        // this.$model.$table.setTargetCell()\r\n        // this.$controller.startListenEvents()\r\n\r\n    }\r\n}","import {config} from \"../components/config\"\r\nimport {View} from \"./View\";\r\nimport {app} from \"../index\";\r\n\r\nexport class Controller {\r\n\r\n    constructor() {\r\n        this.$directionList = []; // Список стрелок нажатых во время одного тика\r\n    }\r\n\r\n    removeListenEvents() {\r\n        document.removeEventListener(\"keyup\", this.keyUpFunction);\r\n    }\r\n\r\n    keyUpFunction(event) {\r\n\r\n        switch (event.code) {\r\n            case \"ArrowUp\":\r\n                app.$controller.$directionList.push(\"up\");\r\n                break;\r\n            case \"ArrowDown\":\r\n                app.$controller.$directionList.push(\"down\");\r\n                break;\r\n            case \"ArrowLeft\":\r\n                app.$controller.$directionList.push(\"left\");\r\n                break;\r\n            case \"ArrowRight\":\r\n                app.$controller.$directionList.push(\"right\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    // Слушачем события стрелок и добавляем их в массив событий\r\n    startListenEvents() {\r\n        this.$eventListener = document.addEventListener(\"keyup\", this.keyUpFunction)\r\n\r\n        // Берем последнее события стрелок в течении одного тика и меняем направление змеи\r\n        app.$intervalEvent.addEvent(function (event) {\r\n            let direction\r\n\r\n            if (app.$controller.$directionList.length !== 0) {\r\n                direction = app.$controller.$directionList.pop()\r\n\r\n                if ((direction === \"up\" && app.$model.$snake.$direction !== \"down\") ){\r\n                    app.$model.$snake.$direction = direction;\r\n                }\r\n\r\n                if ((direction === \"down\" && app.$model.$snake.$direction !== \"up\") ){\r\n                    app.$model.$snake.$direction = direction;\r\n                }\r\n\r\n                if ((direction === \"left\" && app.$model.$snake.$direction !== \"right\") ){\r\n                    app.$model.$snake.$direction = direction;\r\n                }\r\n\r\n                if ((direction === \"right\" && app.$model.$snake.$direction !== \"left\") ){\r\n                    app.$model.$snake.$direction = direction;\r\n                }\r\n\r\n                console.log(direction)\r\n            } else {\r\n                console.log(\"no event\")\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n}\r\n","import {Cell} from \"../components/Cell\";\r\nimport {Table} from \"../components/Table\";\r\nimport {Snake} from \"../components/Snake\";\r\nimport {config} from \"../components/config\"\r\nimport {app} from \"../index\"\r\n\r\nexport class Model {\r\n    constructor(axisCellCount) {\r\n        this.$snake = new Snake()\r\n        this.$table = new Table(config.axisCellCount); // 0 - пустая клетки, 1 - клетки змеи, 2 - таргет клетки\r\n\r\n        // таргет клетка для змейки\r\n        //this.$currentTargetCell = this.$table.getFreeCell(this.$snake);\r\n    }\r\n}\r\n","import {config} from \"../components/config\";\r\nimport {app} from \"../index\";\r\n\r\n\r\nexport class View {\r\n    constructor() {\r\n        this.$root = document.getElementById(config.root);\r\n        this.$cellComponents = new Array(config.axisCellCount);\r\n        for (let i = 0; i < config.axisCellCount; i++)\r\n            this.$cellComponents[i] = new Array(config.axisCellCount)\r\n    }\r\n\r\n    clearTable() {\r\n        this.$root.innerHTML = \"\";\r\n    }\r\n\r\n    addTableCell(cell) {\r\n\r\n        this.$cellComponents[cell.x][cell.y] = cell\r\n        //cell.el.innerText = `${cell.x} , ${cell.y}`\r\n        //this.$cellComponents[1][2]\r\n        app.$root.appendChild(cell.el);\r\n        //this.$cellComponents.push(cell );\r\n    }\r\n\r\n    initSnake(table, snake) {\r\n        for (let i = 0; i < snake.listPoints.length; i++) {\r\n            let snakeX = snake.listPoints[i].x\r\n            let snakeY = snake.listPoints[i].y\r\n            this.$cellComponents[snakeX][snakeY].el.classList.add(\"cell_snake\")\r\n        }\r\n    }\r\n\r\n    addSnakeCell(firstCell) {\r\n        this.$cellComponents[firstCell.x][firstCell.y].el.classList.add(\"cell_snake\")\r\n        this.$cellComponents[firstCell.x][firstCell.y].el.classList.remove(\"cell_target\")\r\n    }\r\n\r\n    removeSnakeCell(lastCell) {\r\n        this.$cellComponents[lastCell.x][lastCell.y].el.classList.add(\"cell_snake\")\r\n        this.$cellComponents[lastCell.x][lastCell.y].el.classList.remove(\"cell_target\")\r\n    }\r\n\r\n    updateSnake() {\r\n        app.$intervalEvent.addEvent(function () {\r\n            let lastSnakeCellX = app.$model.$snake.$lastCell.x\r\n            let lastSnakeCellY = app.$model.$snake.$lastCell.y\r\n\r\n            let firstSnakeCellX = app.$model.$snake.listPoints[0].x\r\n            let firstSnakeCellY = app.$model.$snake.listPoints[0].y\r\n\r\n            app.$view.$cellComponents[lastSnakeCellX][lastSnakeCellY].el.classList.remove(\"cell_snake\")\r\n            app.$view.$cellComponents[firstSnakeCellX][firstSnakeCellY].el.classList.add(\"cell_snake\")\r\n        })\r\n    }\r\n\r\n    setTargetCell(cell) {\r\n        this.$cellComponents[cell.x][cell.y].el.classList.add(\"cell_target\")\r\n    }\r\n}\r\n","import \"./main.sass\"\r\nimport {App} from \"./core/App\"\r\nimport {config} from \"./components/config\"\r\n\r\nexport let app = new App(config.axisCellCount, \"board\");\r\napp.startGame()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./index.js\");\n"],"sourceRoot":""}